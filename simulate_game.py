"""
THIS CODE WAS GENERATED BY AI.
"""

import sys
from state import State
from random_player import RandomPlayer
from greedy_player import GreedyPlayer
from mcts_player import MCTSPlayer
from heuristics_player import HeuristicPlayer

def create_player(player_type, symbol):
    if player_type.lower() == "random":
        return RandomPlayer(f"Random Player {symbol}", symbol)
    if player_type.lower() == "greedy":
        return GreedyPlayer(f"Greedy Player {symbol}", symbol)
    if player_type.lower() == "mcts":
        return MCTSPlayer(f"MCTS Player {symbol}", symbol)
    if player_type.lower() == "heuristic":
        return HeuristicPlayer(f"Heuristic Player {symbol}", symbol)
    # Add more player types here as needed
    return None

def simulate_game(state, player1, player2):
    state.reset()  # Reset the state at the beginning of each game
    players = {player1.symbol: player1, player2.symbol: player2}
    current_symbol = 'X'  # X starts

    while not state.is_terminal()[0]:
       # print()
        #state.print_board()
        player = players[current_symbol]
        move = player.choose_move(state)
        if move:
            state.apply_move(move)
            #print()
            #print(f"Move made by {current_symbol} at {move}")
            #state.print_board()
        else:
            #print()
            #print("No valid moves available, ending game.")
            #print()
            #state.print_board()
            break
        current_symbol = 'O' if current_symbol == 'X' else 'X'

    _, winner = state.is_terminal()
    #print()
    #state.print_board()
    #print(f"Game ended. Winner: {winner}")
    return winner

def main():
    if len(sys.argv) < 4:
        print("Usage: python simulate_game.py player1_type player2_type num_games")
        sys.exit(1)

    player1_type = sys.argv[1]
    player2_type = sys.argv[2]
    num_games = int(sys.argv[3])

    state = State()
    player1 = create_player(player1_type, 'X')
    player2 = create_player(player2_type, 'O')

    results = {"Player X": 0, "Player O": 0, "Draw": 0}
    for _ in range(num_games):
        winner = simulate_game(state, player1, player2)
        if winner == 'Draw':
            results["Draw"] += 1
        elif winner == 'X':
            results["Player X"] += 1
        elif winner == 'O':
            results["Player O"] += 1

    print("Simulation Results")
    print(f"Player X ({player1_type}) wins: {results['Player X']}, winning percentage: {(results['Player X']/num_games)*100}%")
    print(f"Player O ({player2_type}) wins: {results['Player O']}, winning percentage: {(results['Player O']/num_games)*100}%")
    print(f"Draws: {results['Draw']}")

if __name__ == "__main__":
    main()

